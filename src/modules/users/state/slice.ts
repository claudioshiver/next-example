import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../commons/store';
import IUser from "../models/IUser";
import LoadingState from "../../commons/enums/LoadingState";
import {getRandomUsers} from "./thunk";
import {usersAdapter, usersSelectors} from "./adapter";

export interface UsersState {
    status: LoadingState;
}

const initialState: UsersState = {
    status: LoadingState.LOADED,
};

export const usersSlice = createSlice({
    name: 'users',
    initialState: usersAdapter.getInitialState(initialState),
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        toggleActiveUser: (state, action: PayloadAction<string>) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes

            const user = state.entities[action.payload];

            usersAdapter.updateOne(state, {
                id: action.payload,
                changes: {
                    active: !user.active
                }
            })
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {
        [getRandomUsers.pending.type](state) {
            state.status = LoadingState.LOADING;
        },
        [getRandomUsers.rejected.type](state) {
            state.status = LoadingState.FAILED;
        },
        [getRandomUsers.fulfilled.type](state, action: PayloadAction<IUser[]>) {
            state.status = LoadingState.LOADED;
            usersAdapter.setAll(state, action.payload);
        }
    }
});

export const {toggleActiveUser} = usersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsers = () => (state: RootState) => usersSelectors.selectAll(state);
export const selectUser = (id: string) => (state: RootState) => usersSelectors.selectById(state, id);
export const selectUsersLoading = () => (state: RootState) => state.users.status;

export default usersSlice.reducer;
